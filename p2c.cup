import java_cup.runtime.*;

parser code {:
       public static void main(String args[]) throws Exception {
       	      new parser(new Yylex(System.in)).parse();
       }
:}

action code {:

:}

terminal _BEGIN;
terminal ELSE;
terminal _END;
terminal IF;
terminal FOR;
terminal TO;
terminal DO;
terminal PROGRAM;
terminal PROCEDURE;
terminal FUNCTION;
terminal THEN;
terminal VAR;
terminal FOIS;
terminal PLUS;
terminal MOINS;
terminal SUR;
terminal POINTVIRG;
terminal VIRG;
terminal PARENTG;
terminal PARENTD;
terminal EGAL;
terminal PPTQ;
terminal PGDQ;
terminal PPTOUEGQ;
terminal PGDOUEGQ;
terminal DIFF;
terminal DEUXPOINT;
terminal ASSIGN;
terminal POINT;
terminal ID;
terminal INT;
terminal REAL;
terminal CHAINE;
terminal CARAC;

non terminal programme;
non terminal bloc;
non terminal blocdeclarations;
non terminal declarations;
non terminal unedeclaration;
non terminal declarationvar;
non terminal unedeclarationvar;
non terminal variables;
non terminal unevariable;
non terminal declarationproc;
non terminal enteteproc;
non terminal entetefunc;
non terminal declarationfunc;
non terminal parametres;
non terminal unparametre;
non terminal param;
non terminal operations;
non terminal uneoperation;
non terminal affectation;
non terminal boucle;
non terminal condition;
non terminal appel;
non terminal expr;
non terminal cible;
non terminal listexpr;
non terminal oprel;
non terminal opadd;
non terminal opmul;
non terminal identifiant;
non terminal flottant;
non terminal entier;
non terminal caractere;
non terminal chaine;

precedence right ASSIGN;
precedence left EGAL, PPTQ, PGDQ, PPTOUEGQ, PGDOUEGQ, DIFF;
precedence left PLUS, MOINS;
precedence left FOIS, SUR;        

programme ::= PROGRAM identifiant:i POINTVIRG bloc POINT {:System.out.println("-=PROGRAM "+i+" =-");:};
bloc	::= blocdeclarations _BEGIN operations _END {:System.out.println("-=BLOC=-");:};
blocdeclarations ::= /*rien*/
		 | declarations;
declarations ::= unedeclaration
		| unedeclaration declarations;
unedeclaration ::= VAR declarationvar {:System.out.println("-=DECLVAR=-");:}
		| declarationproc
		| declarationfunc;
declarationvar ::= unedeclarationvar
	       | unedeclarationvar declarationvar;
unedeclarationvar ::= variables DEUXPOINT identifiant POINTVIRG
		  |variables DEUXPOINT identifiant;
variables ::= identifiant
	 | identifiant VIRG variables;
declarationproc ::= enteteproc POINTVIRG bloc POINTVIRG {:System.out.println("-=DECLPROC=-");:};
declarationfunc ::= entetefunc DEUXPOINT identifiant POINTVIRG bloc POINTVIRG;
enteteproc ::= PROCEDURE identifiant PARENTG parametres PARENTD;
entetefunc ::= FUNCTION identifiant PARENTG parametres PARENTD
	   |   FUNCTION identifiant ;
parametres ::= /*rien*/
				| unparametre
				| unparametre POINTVIRG parametres;
unparametre ::=  param DEUXPOINT identifiant;
param ::= identifiant
      | identifiant VIRG param;
operations ::= uneoperation
			| uneoperation POINTVIRG operations;
uneoperation ::= /*rien*/
			| affectation
			| boucle
			| condition
			| appel;
affectation ::= cible ASSIGN expr {:System.out.println("-=AFFECTATION=-");:};
boucle ::= FOR affectation TO identifiant DO bloc {:System.out.println("-=BOUCLE FOR BLOC=-");:}
       	   | FOR affectation TO identifiant DO uneoperation {:System.out.println("-=BOUCLE FOR=-");:};
condition ::= IF expr THEN uneoperation POINTVIRG{:System.out.println("-=IF THEN=-");:}
	  | IF expr THEN uneoperation ELSE uneoperation {:System.out.println("-=IF THEN ELSE=-");:}
	  | IF expr THEN bloc POINTVIRG {:System.out.println("-=IF THEN BLOC=-");:}
	  | IF expr THEN bloc ELSE bloc POINTVIRG {:System.out.println("-=IF THEN ELSE BLOC=-");:};
appel ::= identifiant PARENTG listexpr PARENTD {:System.out.println("-=APPEL PARENT=-");:}
      	  | identifiant {:System.out.println("-=APPEL=-");:};
expr ::= entier
		| flottant
		| caractere
		| cible
		| unevariable PARENTG listexpr PARENTD
		| expr oprel expr
		| expr opadd expr
		| expr opmul expr
		| chaine;
cible ::= identifiant;
listexpr ::= expr
			| expr VIRG listexpr;
oprel ::= PPTQ
		| PGDQ
		| EGAL
		| PPTOUEGQ
		| PGDOUEGQ
		| DIFF;
opadd ::= PLUS
		| MOINS;
opmul ::= FOIS
		| SUR;
identifiant ::= ID:i  {:RESULT = i;:};
flottant ::= REAL;
entier ::= INT;
caractere ::= CARAC;
chaine ::= CHAINE;